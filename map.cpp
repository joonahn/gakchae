#include "map.h"

int rc1_mapdata[20][70] = {
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 4, 0, 0, 0, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 4, 4, 4, 4, 1, 1, 1, 3, 4, 5, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 4, 2, 0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 0, 3, 4, 4, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 6, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 1, 1, 1, 1, 1, 1, 3, 4, 2, 7, 7, 7, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 2, 7, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 7, 7, 7, 0, 0, 3, 4, 2, 0, 7, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 2, 7, 3, 4, 2, 4, 0, 0, 0, 4, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 6, 4, 7, 7, 7, 7, 7, 3, 4, 2, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 2, 1, 4, 4, 2, 4, 7, 7, 7, 4, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 7, 7, 7, 7, 7, 3, 4, 2, 7, 4, 4, 4, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 4, 4, 4, 0, 7, 4, 7, 7, 7, 4, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 6, 4, 7, 7, 7, 7, 7, 3, 4, 2, 7, 4, 4, 4, 5, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 0, 0, 0, 7, 7, 4, 1, 1, 1, 4, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 7, 7, 7, 7, 7, 3, 4, 2, 7, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 6, 4, 7, 7, 7, 7, 7, 3, 4, 5, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 1, 1, 1, 1, 1, 4, 7, 7, 4, 7, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 7, 7, 7, 7, 7, 3, 4, 4, 4, 4, 5, 6, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 4, 7, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 6, 4, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 6, 5, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 7, 7, 7, 7, 8, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 7, 7, 7, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 7, 7, 7, 7, 3, 4, 5, 5, 4, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 6, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 7, 7, 7, 7, 3, 4, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 2, 1, 1, 1, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 3, 4, 6, 6, 4, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 3, 4, 4, 4, 4, 4, 4, 4, 2, 0, 7, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, }
    };

int rc2_mapdata[100][100]={rfloor};

Map::Map(QMainWindow *_mainwindow,QWidget *parent):QWidget(parent)
{
    //Initialize & Load RC1 stage
    mainwindow = dynamic_cast<Ui::MainWindow*>(_mainwindow);

    //in pixel coordination
    me = new Character(this, this, 350, 750, 0);

    //Initial Junwi Position Needed, in pixel coordination
    junwis[0] = new SJW(this, this, 350,150,DOWN);
    junwis[1] = new SJW(this, this, 2950,350,DOWN);
    junwis[2] = new SJW(this, this, 1250,800,LEFT);
    junwis[3] = new SJW(this, this, 1300,300, RIGHT);
    junwis[4] = new SJW(this, this, 1850,300, UP);
    junwis[5] = new SJW(this, this, 3050,200, RIGHT);

    //Initialize Tiles
    for(int i = 0;i<20;i++)
        for(int j = 0;j<70;j++)
        {
            /*j is X axis coordination, i is j axis coordination */
            mapData[i][j] = new Tile(this,this, static_cast<TileType>(rc1_mapdata[i][j]), i, j);
        }
}

Character *Map::getCharacter()
{
    return me;
}

Tile *Map::getTile(int x, int y)
{
    return mapData[y][x];
}

void Map::placeObject()
{
    me->setGeometry((740-50)/2, (515-50)/2, 50, 50);
    for(int i = 0;i<20;i++)
        for(int j = 0;j<70;j++)
        {
            mapData[i][j]->setGeometry(mapData[i][j]->getx()*50 - me->getx() + ((740-50/2)),
                                       mapData[i][j]->gety()*50 - me->gety() + ((515-50)/2), 50, 50);
        }
    for(int i = 0;i<6;i++)
    {
        junwis[i]->setGeometry(junwis[i]->getx()*50 - me->getx() + ((740-50/2)),
                               junwis[i]->gety()*50 - me->gety() + ((515-50)/2), 50, 50);
    }

}
