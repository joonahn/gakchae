#include "map.h"

int rc1_mapdata[20][70] = {
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 7, 1, 1, 1, 1, 4, 0, 0, 0, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 4, 4, 4, 4, 1, 1, 1, 3, 4, 5, 1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 3, 4, 2, 0, 0, 0, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 0, 3, 4, 4, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 6, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 1, 1, 1, 1, 1, 1, 3, 4, 2, 7, 7, 7, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 2, 7, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 7, 7, 7, 0, 0, 3, 4, 2, 0, 7, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 2, 7, 3, 4, 2, 4, 0, 0, 0, 4, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 6, 4, 7, 7, 7, 7, 7, 3, 4, 2, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 0, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 2, 1, 4, 4, 2, 4, 7, 7, 7, 4, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 7, 7, 7, 7, 7, 3, 4, 2, 7, 4, 4, 4, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 4, 4, 4, 0, 7, 4, 7, 7, 7, 4, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 6, 4, 7, 7, 7, 7, 7, 3, 4, 2, 7, 4, 4, 4, 5, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 0, 0, 0, 7, 7, 4, 1, 1, 1, 4, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 7, 7, 7, 7, 7, 3, 4, 2, 7, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 7, 7, 7, 7, 7, 4, 4, 4, 4, 4, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 6, 4, 7, 7, 7, 7, 7, 3, 4, 5, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 1, 1, 1, 1, 1, 4, 7, 7, 4, 7, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 7, 7, 7, 7, 7, 3, 4, 4, 4, 4, 5, 6, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 4, 7, 7, 7, 7, 4, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 6, 4, 7, 7, 7, 7, 7, 7, 7, 4, 4, 4, 6, 5, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 7, 7, 7, 7, 8, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 7, 7, 7, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 2, 7, 7, 7, 7, 7, 7, 7, 3, 4, 7, 7, 7, 7, 3, 4, 5, 5, 4, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 6, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 7, 7, 7, 7, 7, 7, 7, 7, 7, 4, 7, 7, 7, 3, 4, 2, 7, 7, 7, 3, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 4, 7, 7, 7, 7, 3, 4, 7, 7, 4, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 5, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 2, 1, 1, 1, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 3, 4, 6, 6, 4, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 1, 1, 1, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 3, 4, 4, 4, 4, 4, 4, 4, 2, 0, 7, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, },
    { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, }
};

int rc2_mapdata[100][100]={rfloor};

Map::Map(QMainWindow *_mainwindow,QWidget *parent):QWidget(parent)
{
    //Initialize & Load RC1 stage
    mainwindow = dynamic_cast<Ui::MainWindow*>(_mainwindow);

    //Initialize Tiles
    for(int i = 0;i<20;i++)
        for(int j = 0;j<70;j++)
        {
            /*j is X axis coordination, i is j axis coordination */
            mapData[i][j] = new Tile(this,this, static_cast<TileType>(rc1_mapdata[i][j]), i, j);
        }

    //in pixel coordination
    me = new Character(this,this,5,350,750);

    //Initial Junwi Position Needed, in pixel coordination
    junwis[0] = new SJW(this, this, 350,150,DOWN);
    junwis[1] = new SJW(this, this, 2950,350,DOWN);
    junwis[2] = new SJW(this, this, 1250,800,LEFT);
    junwis[3] = new SJW(this, this, 1300,300, RIGHT);
    junwis[4] = new SJW(this, this, 1850,300, UP);
    junwis[5] = new SJW(this, this, 3050,200, RIGHT);

    placeObject();
    timer=new QTimer(this);
    connect(timer,SIGNAL(timeout()),this,SLOT(moveall()));
    timer->start(1000);
    connect(me,SIGNAL(catched()),this,SLOT(reset()));
}

Character *Map::getCharacter()
{
    return me;
}

Tile *Map::getTile(int x, int y)
{
    return mapData[y][x];
}

//This function places map tiles, my character, saejunwis
void Map::placeObject()
{
    me->setGeometry((740-50)/2, (515-50)/2, 50, 50);
    for(int i = 0;i<20;i++)
        for(int j = 0;j<70;j++)
        {
            mapData[i][j]->setGeometry(j*50 - me->gety() + ((740-50)/2),
                                       i*50 - me->getx() + ((515-50)/2), 50, 50);
        }
    for(int i = 0;i<6;i++)
    {
        junwis[i]->setGeometry(junwis[i]->gety() - me->gety() + ((740-50)/2),
                               junwis[i]->getx() - me->getx() + ((515-50)/2), 50, 50);
    }

}
SJW *Map::getJunwi(int index)
{
    return junwis[index];
}

void Map::moveall()
{
    for(int i=0;i<6;i++)
        junwis[i]->move();
    me->move();
}

void Map::reset()
{
    me->setx(750);
    me->sety(350);
    me->changedir(NONE);
    junwis[0]->setx(150);
    junwis[0]->sety(350);
    junwis[0]->changedir(DOWN);
    junwis[1]->setx(350);
    junwis[1]->sety(2950);
    junwis[1]->changedir(DOWN);
    junwis[2]->setx(800);
    junwis[2]->sety(1250);
    junwis[2]->changedir(LEFT);
    junwis[3]->setx(300);
    junwis[3]->sety(1300);
    junwis[3]->changedir(RIGHT);
    junwis[4]->setx(300);
    junwis[4]->sety(1850);
    junwis[4]->changedir(UP);
    junwis[5]->setx(200);
    junwis[5]->sety(3050);
    junwis[5]->changedir(RIGHT);
}
